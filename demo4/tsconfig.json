{
  "compilerOptions": {
    // 启用所有严格类型检查选项。启用 --strict相当于启用 --noImplicitAny,--noImplicitThis, --alwaysStrict， --strictNullChecks和--strictFunctionTypes和--strictPropertyInitialization
    "strict": true,
    // "baseUrl": "src",
    // "paths": {
    //   "@/*": ["*"]
    // }, 
    // 出口
    "outDir": "./es",
    // 指定生成哪个模块系统代码： "None"， "CommonJS"， "AMD"，"System"， "UMD"， "ES6"或 "ES2015"。► 只有 "AMD"和 "System"能和 --outFile一起使用。► "ES6"和 "ES2015"可使用在目标输出为 "ES5"或更低的情况下。
    "module": "ESNext",
    // 指定ECMAScript目标版本 "ES3"（默认）， "ES5"， "ES6"/ "ES2015"， "ES2016"， "ES2017"或 "ESNext"。注意： "ESNext"最新的生成目标列表为 ES proposed features
    "target": "ESNext",
    // 决定如何处理模块。或者是"Node"对于Node.js/io.js，或者是"Classic"（默认） 
    "moduleResolution": "Node",
    // 对应react的import * as React from 'react'的处理
    // "esModuleInterop": true,
    // 在 .tsx文件里支持JSX： "React"或 "Preserve"。 
    // "jsx": "react",
    // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查
    "allowSyntheticDefaultImports":true,
    // 忽略所有的声明文件（ *.d.ts）的类型检查。
    "skipLibCheck": true,
    // 允许编译javascript文件
    "allowJs": true,
    // tsc后生成相应的 .d.ts文件。
    "declaration": true,
    // 只生成 .d.ts文件
    // "emitDeclarationOnly": true,
    // 	禁止对同一个文件的不一致的引用。
    "forceConsistentCasingInFileNames": true,
    // 启用实验性的ES装饰器。
    "experimentalDecorators": true,
    // 报错时不生成输出文件。
    "noEmitOnError": true,
    // 根（root）文件夹列表，表示运行时组合工程结构的内容?
    // "rootDirs": ["./src", "./test", "./types"],
    // 仅用来控制输出的目录结构 --outDir。
    // "rootDir": "./src",
    // 要包含的类型声明文件路径列表。
    "typeRoots": [
      "./node_modules/@types",
      "typings"
    ]
  },
  "include": [
    "src/**/*",
    "typings"
  ],
  "exclude": [
    "node_modules",
    "dist"
  ]
}